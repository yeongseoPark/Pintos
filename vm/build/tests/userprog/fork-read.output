Kernel command line: -q -f put fork-read put sample.txt run fork-read
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  202,956,800 loops/s.
hd0:0: detected 329 sector (164 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 111 sector (55 kB) disk, model "QEMU HARDDISK", serial "QM00003"
hd1:1: detected 8,064 sector (3 MB) disk, model "QEMU HARDDISK", serial "QM00004"
Formatting file system...done.
Boot complete.
Putting 'fork-read' into the file system...
Putting 'sample.txt' into the file system...
Executing 'fork-read':
(fork-read) begin
(fork-read) open "sample.txt"
(fork-read) child run
(fork-read) Child: pintos is funny!
(fork-read) end
child: exit(0)
Kernel PANIC at ../../filesys/inode.c:304 in inode_allow_write(): assertion `inode->deny_write_cnt > 0' failed.
Call stack: 0x8004217ec2 0x8004220093 0x800421eeea 0x800421ec97 0x80042217f7 0x800422152e 0x800421a490 0x800422156d 0x800421bc2c 0x800421bbd8 0x80042076fb 0x800421d223 0x800421ce48 0x800421cd0c 0x400fed.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 72 ticks
Thread: 46 idle ticks, 26 kernel ticks, 0 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 116 reads, 260 writes
hd1:0: 111 reads, 0 writes
hd1:1: 0 reads, 0 writes
Console: 1527 characters output
Key