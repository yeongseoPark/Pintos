Kernel command line: -q run priority-donate-nest
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  224,051,200 loops/s.
Boot complete.
Executing 'priority-donate-nest':
(priority-donate-nest) begin
(priority-donate-nest) Low thread should have priority 32.  Actual priority: 32.
(priority-donate-nest) Low thread should have priority 33.  Actual priority: 33.
(priority-donate-nest) Medium thread should have priority 33.  Actual priority: 33.
(priority-donate-nest) Medium thread got the lock.
(priority-donate-nest) High thread got the lock.
(priority-donate-nest) High thread finished.
(priority-donate-nest) Interrupt 0x0d (#GP General Protection Exception) at rip=8004207c14
 cr2=0000000000000000 error=               0
rax ccccccccccccccac rbx 0000000000000000 rcx 00000080040b8000 rdx 00000000000003d4
rsp 0000008004234e30 rbp 0000008004234e60 rsi 000000000000970f rdi 0000008004234048
rip 0000008004207c14 r8 0000008004234ebc  r9 0000008004216b4e r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000296
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213866 0x8004208c61 0x8004209013 0x800420a2e8 0x8004216999 0x8004216a46 0x8004210d69 0x8004216d61 0x80042188d2 0x8004207270.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 30 ticks
Thread: 0 idle ticks, 30 kernel ticks, 0 user ticks
Console: 1